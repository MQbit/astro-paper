---
import { Markdown } from "@astrojs/markdown-remark";
import { SITE } from "@config";
import Breadcrumbs from "@components/Breadcrumbs.astro";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import Layout from "./Layout.astro";
import Main from "@layouts/Main.astro";
import { getCollection } from "astro:content";
import getPostsByTag from "@utils/getPostsByTag";
import getUniqueTags from "@utils/getUniqueTags";
import getPageNumbers from "@utils/getPageNumbers";

export async function getStaticPaths() {
  const posts = await getCollection("agents");
  const tags = getUniqueTags(posts);

  return tags.flatMap(({ tag, tagName }) => {
    const tagPosts = getPostsByTag(posts, tag);
    const totalPages = getPageNumbers(tagPosts.length);

    return totalPages.map(page => ({
      params: { tag, page },
      props: { tag, tagName },
    }));
  });
}

const { tag } = Astro.props;

const posts = await getCollection(
  "blog",
  ({ data }) => !data.draft && data.tags?.includes(tag)
);

// Assuming `slug` is defined in your route params for individual post pages
const slug = Astro.request.params.slug;
const content = posts.find(post => post.frontmatter.slug === slug);

// Ensure content exists. If not, we might want to redirect or show a 404.
if (!content) {
  throw new Error(`Post not found for slug: ${slug}`);
}

const { frontmatter, Content } = content;
---

<Layout title={`${frontmatter.title} | ${SITE.title}`}>
  <Header activeNav="blog" />
  <Breadcrumbs />
  <Main
    pageTitle={frontmatter.title}
    pageDesc={frontmatter.description || "Discover more about our agents."}
  >
    <article>
      <h1>{frontmatter.title}</h1>
      <Content />
      <!-- Using Astro Content component to render markdown content -->
    </article>
  </Main>
  <Footer />
</Layout>
